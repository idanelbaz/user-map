{"version":3,"sources":["componentes/Map/Map.js","store/types.js","services/locationService.js","store/actions/locationActions.js","views/HomePage/HomePage.js","App.js","serviceWorker.js","store/reducers/index.js","store/reducers/locationReducer.js","index.js"],"names":["MapContainer","props","city","countryCode","googleLink","concat","react_default","a","createElement","className","title","frameBorder","src","allowFullScreen","types","GET_USER_LOCATION","apiKey","locationService","getUserLocation","_callee","res","regenerator_default","wrap","_context","prev","next","Axios","get","sent","abrupt","data","t0","stop","_ref","Object","asyncToGenerator","mark","dispatch","response","type","_x","apply","this","arguments","connect","userLocation","locationReducer","notify","txt","toast","_fatchData","useEffect","fatchData","react_toastify","country_name","Map_Map","country_code","Spinner","animation","variant","App","views_HomePage_HomePage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","combinedReducer","combineReducers","length","undefined","action","_objectSpread","middleware","thunk","store","createStore","reducer","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","e","prompt"],"mappings":"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","file":"static/js/main.63bdf49b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Map.css';\r\n\r\nconst MapContainer = props => {\r\n\r\n    const { city, countryCode } = props;\r\n    const googleLink = `https://www.google.com/maps/embed/v1/place?key=AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk&q=${city}+${countryCode}`;\r\n    return (\r\n        <div>\r\n            <iframe className=\"map\" title=\"Your IP location\"\r\n                frameBorder=\"0\"\r\n                src={googleLink}\r\n                allowFullScreen>\r\n            </iframe>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapContainer;\r\n","const types = {\r\n    GET_USER_LOCATION: \"GET_USER_LOCATION\"\r\n};\r\nexport default types;","import Axios from 'axios';\n\nconst apiKey = '5387587bd1589681f82ded2b3ad203add911ec7439eb3ff2c0f67288';\n\nexport default {\n  getUserLocation,\n}\n\nasync function getUserLocation() {\n  try {\n    const res = await Axios.get((`https://api.ipdata.co/?api-key=${apiKey}`));\n    return res.data;\n  }\n  catch (err) {\n    throw err;\n  }\n}\n\n\n\n\n","import types from \"../types\";\r\nimport locationService from \"../../services/locationService\";\r\n\r\n\r\nexport const getUserLocation = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await locationService.getUserLocation();\r\n            await dispatch({ type: types.GET_USER_LOCATION, data: response });\r\n        }\r\n        catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Map from '../../componentes/Map/Map';\r\nimport { getUserLocation } from '../../store/actions/locationActions';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './HomePage.css';\r\n\r\n\r\nconst HomePage = props => {\r\n\r\n    const notify = (txt) => toast(txt);\r\n\r\n    useEffect(() => {\r\n        if (props.userLocation === null) fatchData();\r\n    });\r\n\r\n    async function fatchData() {\r\n        const { dispatch } = props;\r\n        try {\r\n            await dispatch(getUserLocation());\r\n        }\r\n        catch (err) {\r\n            notify('Cannot find your location');\r\n        }\r\n    };\r\n\r\n    const { userLocation } = props;\r\n    return (\r\n        <div className=\"homePage\">\r\n            <ToastContainer />\r\n            {userLocation !== null &&\r\n                <div className=\"map-container\">\r\n                    <h1 className=\"page-header\">Your IP location is: {userLocation.city}, {userLocation.country_name}</h1>\r\n                    <Map city={userLocation.city} countryCode={userLocation.country_code}></Map>\r\n                </div>\r\n            }\r\n            {userLocation === null &&\r\n                <Spinner animation=\"grow\" variant=\"info\" />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ locationReducer }) => {\r\n    const { userLocation } = locationReducer;\r\n    return {\r\n        userLocation\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(HomePage);","import React from 'react';\nimport './App.css';\nimport HomePage from '../src/views/HomePage/HomePage';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <HomePage></HomePage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport locationReducer from './locationReducer';\r\n\r\nconst combinedReducer = combineReducers({\r\n  locationReducer\r\n})\r\n\r\nexport default combinedReducer;\r\n","import types from \"../types\";\r\n\r\nexport default function\r\n  postsReducer(state = { userLocation: null }, action) {\r\n  switch (action.type) {\r\n    case types.GET_USER_LOCATION:\r\n      return { ...state, userLocation: action.data };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport thunk from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './store/reducers'\n\nconst middleware = [thunk]\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger())\n}\nconst store = createStore(\n  reducer,\n  applyMiddleware(...middleware)\n)\nReactDOM.render(<Provider store={store}>\n  <App /></Provider>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  console.log('beforeinstallprompt event has fired')\n  e.prompt()\n});"],"sourceRoot":""}